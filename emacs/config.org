* Basics

#+begin_src emacs-lisp :tangle yes
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (show-paren-mode 1)
  (scroll-bar-mode -1)
  (delete-selection-mode 1)
  (global-hl-line-mode +1)

  '(warning-minimum-level :error)

  (global-display-line-numbers-mode +1)
  (defun my-relative-line-numbers-hook ()
    (setq display-line-numbers 'relative))
  (add-hook 'display-line-numbers-mode-hook 'my-relative-line-numbers-hook)

  (setq backup-directory-alist '(("." . "~/.emacs_saves")))

  (setq use-short-answers t)

  (setq ring-bell-function 'ignore)

  (setq-default indent-tabs-mode nil)

  (global-visual-line-mode 1)

  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)

  (setq dired-listing-switches "-alFh")


  (defun rc/duplicate-dwim()
    (interactive)
    (duplicate-dwim ())
    (next-line))

  (global-set-key (kbd "C-,") 'rc/duplicate-dwim)

#+end_src

* Smex

Configure smex and backup old call just in case
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+end_src

* Multiple cursor

Configure mc
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  (global-set-key (kbd "C-\"") 'mc/skip-to-next-like-this)
  (global-set-key (kbd "C-:") 'mc/skip-to-previous-like-this)
#+end_src

* Tex

#+begin_src emacs-lisp :tangle yes
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-engine 'xetex)
  (setq-default TeX-master nil) ; Query for master file.
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
#+end_src

* Orgmode

#+begin_src emacs-lisp :tangle yes
  (setq org-hide-emphasis-markers t)
  ;; (advice-remove 'org-babel-do-load-languages #'ignore)
  ;;  (add-to-list 'org-src-lang-modes '("jupyter" . python))

  ;; (org-babel-do-load-languages
  ;;  'org-babel-load-languages
  ;;  '((haskell . t)
  ;;    (sql . t)
  ;;    (shell . t)
  ;;    (python . t)
  ;;    (jupyter . t)

  ;;   ;; ... other languages you might have
  ;;    ))
  ;;    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)

  ;; (defun org-babel-execute:fsharp (body params)
  ;; (let* ((command (concat "echo '" body "' | dotnet fsi --nologo | grep 'val it:.* =' | sed 's/^.*= //'"))
  ;;        (result (string-trim (shell-command-to-string command))))
  ;;   result))

  ;; (defun org-babel-execute:fsharp (body params)
  ;;   (let* ((command (concat "echo '" body "' | dotnet fsi"))
  ;;          (result (string-trim (shell-command-to-string command))))
  ;;     result))

  ;; (use-package ob-fsharp
  ;;   :straight t
  ;;   :config
  ;;   (add-to-list 'org-babel-load-languages '(fsharp . t)))

  (setq doc-view-resolution 400)
  (put 'dired-find-alternate-file 'disabled nil)
  (require 'org-tempo)

  (setq org-directory "~/sync/orgmode/gtd")
  (setq org-agenda-files (directory-files org-directory t "\\.org$"))
  (setq org-agenda-skip-unavailable-files t)
  (setq org-refile-targets
        '((nil :maxlevel . 3)
      (org-agenda-files :maxlevel . 3)))

;;  (setq org-refile-targets '((nil :maxlevel . 2)))

  (setq org-capture-templates '(
    ("t" "Todo [inbox]" entry (file+headline "~/sync/orgmode/gtd/inbox.org" "Inbox") "\n* TODO %i%?\n")
    ("c" "Todo [main]" entry (file+headline "~/sync/orgmode/gtd/main.org" "Inbox") "\n* TODO %i%?\n")
   ))

  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)
  (setq org-todo-keywords
        '((sequence "TODO(t)" "IN-PROGRESS(i)" "SUSPENDED(s)" "IN-REVIEW(r)" "|" "WAITING(w)" "DONE(d)" "CANCELED(c)")))
  (setq org-enforce-todo-dependencies t)

  (setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t%-6e% s")
                                   (todo . " %i %-12:c %-6e")
                                   (tags . " %i %-12:c")
                                   (search . " %i %-12:c")))
  (setq org-agenda-skip-scheduled-if-deadline-is-shown t)

  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)

  (setq org-timer-default-timer 25)

  (defun my-org-mode-hook ()
    (org-indent-mode t))
  (add-hook 'org-mode-hook 'my-org-mode-hook)

  (setq org-format-latex-options (plist-put org-format-latex-options :scale 4))

  (setq org-confirm-babel-evaluate nil)
#+end_src

** Task status for Status bars

#+begin_src emacs-lisp :tangle yes
  (defun my-org-timer-remaining-time ()
    "Return the remaining time of the current org-timer as a formatted string."
    (if (and org-timer-countdown-timer
             (timerp org-timer-countdown-timer))
        (let ((time-left (- (time-to-seconds (timer--time org-timer-countdown-timer))
                            (time-to-seconds (current-time)))))
          (if (> time-left 0)
              (format-seconds "%h:%02m" time-left)
            "Time's up!"))
      "No timer set"))

  ;; If font is loaded before frame creation it is reset
  (add-to-list 'after-make-frame-functions
               (lambda (frame)
                 (select-frame frame)
                 (set-face-attribute 'default nil :font "Iosevka Nerd Font-20")))
#+end_src

* Themes

#+begin_src emacs-lisp :tangle yes
  (load-theme 'gruber-darker t)
  (set-face-attribute 'default nil :font "Iosevka Nerd Font-20")
#+end_src

Show whitespaces in program mode
#+begin_src emacs-lisp :tangle yes
  (require 'whitespace)
  (setq whitespace-style '(face empty newline trailing space-mark indentation::space))
  ;(add-hook 'prog-mode-hook 'whitespace-mode)
#+end_src

* Ledger

Specify useful commands for ledger
#+begin_src emacs-lisp :tangle yes
  (setq ledger-reports
      '(("cashflow" "ledger -f %(ledger-file) --cost -X EUR bal ^Income ^Expenses")
        ("cashflow-rsd" "ledger -f %(ledger-file) --cost -X RSD bal ^Income ^Expenses")
        ("net-worth" "ledger -f %(ledger-file) --cost -X EUR bal ^Assets ^Liabilities")
        ("net-worth-rsd" "ledger -f %(ledger-file) --cost -X RSD bal ^Assets ^Liabilities")
        ("prices" "ledger prices -f %(ledger-file)")
        ("bal" "%(binary) -f %(ledger-file) --cost -X EUR bal")
        ("bal-rsd" "%(binary) -f %(ledger-file) --cost -X RSD bal")
        ("reg" "%(binary) -f %(ledger-file) --cost -X EUR reg")
        ("reg-rsd" "%(binary) -f %(ledger-file) --cost -X RSD reg")
        ("payee" "%(binary) -f %(ledger-file) --cost -X EUR reg @%(payee)")
        ("payee-rsd" "%(binary) -f %(ledger-file) --cost -X RSD reg @%(payee)")
        ("account" "%(binary) -f %(ledger-file) --cost -X EUR reg %(account)")
        ("account-rsd" "%(binary) -f %(ledger-file) --cost -X RSD reg %(account)")))
#+end_src

* Org-Roam

#+begin_src emacs-lisp :tangle yes
  ;; Initialize variables
  (setq org-roam-v2-ack t)
  (setq org-roam-directory "~/sync/orgmode/library")
  (setq org-roam-dailies-directory "journal/")
  (setq org-roam-completion-everywhere t)

  ;; Key bindings
  (global-set-key (kbd "C-c n l") 'org-roam-buffer-toggle)
  (global-set-key (kbd "C-c n f") 'org-roam-node-find)
  (global-set-key (kbd "C-c n i") 'org-roam-node-insert)
  (define-key org-mode-map (kbd "C-M-i") 'completion-at-point)

  ;; Load and configure org-roam-dailies
  (require 'org-roam-dailies) ;; Ensure the keymap is available

  ;; Define dailies map if not already defined
  (unless (boundp 'org-roam-dailies-map)
    (define-prefix-command 'org-roam-dailies-map))

  (define-key org-roam-dailies-map (kbd "Y") 'org-roam-dailies-capture-yesterday)
  (define-key org-roam-dailies-map (kbd "T") 'org-roam-dailies-capture-tomorrow)

  ;; Bind the dailies map to a key
  (global-set-key (kbd "C-c n d") org-roam-dailies-map)

  ;; Activate org-roam database autosync
  (org-roam-db-autosync-mode)
#+end_src


** Org-Roam UI

#+begin_src emacs-lisp :tangle yes
  (setq org-roam-ui-sync-theme t)
  (setq org-roam-ui-follow t)
  (setq org-roam-ui-update-on-save t)
  (setq org-roam-ui-open-on-start t)
#+end_src

* Languages

** Compilation mode

Skip warnings in compilation mode.
#+begin_src emacs-lisp :tangle yes
  (setq compilation-skip-threshold 2)
#+end_src

** Flycheck

#+begin_src emacs-lisp :tangle no
  (global-flycheck-mode +1)
#+end_src

** Eglot

#+begin_src emacs-lisp :tangle no
  (add-hook 'eglot--managed-mode-hook (lambda () (flymake-mode -1)))
  (setq eglot-ignored-server-capabilities '(:inlayHintProvider))
#+end_src

** Company-mode

#+begin_src emacs-lisp :tangle no
  (add-hook 'after-init-hook 'global-company-mode)
#+end_src

** Rust

Requires =eglot= and =rust-mode= packages.

#+begin_src emacs-lisp :tangle yes
  ; (require 'eglot)
  ; (add-hook 'rust-mode-hook 'eglot-ensure)

  (require 'rust-mode)
  (setq rust-mode-treesitter-derive t)
  (setq rust-format-on-save t)
#+end_src

** Nix

#+begin_src emacs-lisp :tangle yes
  (add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))
#+end_src

** C

** Linux kernel coding style

#+begin_src emacs-lisp :tangle yes
  (defun c-lineup-arglist-tabs-only (ignored)
  "Line up argument lists by tabs, not spaces"
  (let* ((anchor (c-langelem-pos c-syntactic-element))
         (column (c-langelem-2nd-pos c-syntactic-element))
         (offset (- (1+ column) anchor))
         (steps (floor offset c-basic-offset)))
    (* (max steps 1)
       c-basic-offset)))

(dir-locals-set-class-variables
 'linux-kernel
 '((c-mode . (
        (c-basic-offset . 8)
        (c-label-minimum-indentation . 0)
        (c-offsets-alist . (
                (arglist-close         . c-lineup-arglist-tabs-only)
                (arglist-cont-nonempty .
                    (c-lineup-gcc-asm-reg c-lineup-arglist-tabs-only))
                (arglist-intro         . +)
                (brace-list-intro      . +)
                (c                     . c-lineup-C-comments)
                (case-label            . 0)
                (comment-intro         . c-lineup-comment)
                (cpp-define-intro      . +)
                (cpp-macro             . -1000)
                (cpp-macro-cont        . +)
                (defun-block-intro     . +)
                (else-clause           . 0)
                (func-decl-cont        . +)
                (inclass               . +)
                (inher-cont            . c-lineup-multi-inher)
                (knr-argdecl-intro     . 0)
                (label                 . -1000)
                (statement             . 0)
                (statement-block-intro . +)
                (statement-case-intro  . +)
                (statement-cont        . +)
                (substatement          . +)
                ))
        (indent-tabs-mode . t)
        (show-trailing-whitespace . t)
        ))))

(dir-locals-set-directory-class
 (expand-file-name "~/src/")
 'linux-kernel)
#+end_src

