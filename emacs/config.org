* Basics

#+begin_src emacs-lisp :tangle yes
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (show-paren-mode 1)
  (scroll-bar-mode -1)
  (delete-selection-mode 1)
  (global-hl-line-mode -1)
  (blink-cursor-mode -1)
  (column-number-mode 1)
  ;; (global-set-key (kbd "M-p") #'scroll-down-line)
  ;; (global-set-key (kbd "M-n") #'scroll-up-line)

  '(warning-minimum-level :error)

  (global-display-line-numbers-mode +1)

  ;; (defun my-relative-line-numbers-hook ()
  ;;   (setq display-line-numbers 'relative))
  ;; (add-hook 'display-line-numbers-mode-hook 'my-relative-line-numbers-hook)

  (setq set-fringe-mode 0)
  (setq mode-line-format nil)

  (setq backup-directory-alist '(("." . "~/.emacs_saves")))

  (setq use-short-answers t)

  (setq ring-bell-function 'ignore)

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 8)

  (global-visual-line-mode 1)

  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)

  (setq dired-listing-switches "-alFh")

  ;; return to prev layout with C-c left
  (winner-mode 1)
  ;; (defun rc/duplicate-dwim()
    ;; (interactive)
    ;; (duplicate-dwim ())
    ;; (next-line))

  ;; (global-set-key (kbd "C-,") 'rc/duplicate-dwim)

#+end_src

Keybindings
#+begin_src emacs-lisp :tangle yes
  ;; Opens a new line and places cursor on it, without breaking the current line
  ;; (define-key global-map (kbd "<M-return>") (lambda ()
  ;;                                             (interactive)
  ;;                                             (move-end-of-line 1)
  ;;                                             (newline-and-indent)))

  ;; ;; Opens a new line above and places cursor on it
  ;; (define-key global-map (kbd "<M-S-return>") (lambda ()
  ;;                                             (interactive)
  ;;                                             (move-beginning-of-line 1)
  ;;                                             (newline)
  ;;                                             (previous-line)
  ;;                                             (indent-according-to-mode)))
#+end_src

* Smex

Configure smex and backup old call just in case
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+end_src

* Multiple cursor

Configure mc
#+begin_src emacs-lisp :tangle yes
  ;; (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  ;; (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  ;; (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  ;; (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  ;; (global-set-key (kbd "C-\"") 'mc/skip-to-next-like-this)
  ;; (global-set-key (kbd "C-:") 'mc/skip-to-previous-like-this)
#+end_src

* Tex

#+begin_src emacs-lisp :tangle yes
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-engine 'xetex)
  (setq-default TeX-master nil) ; Query for master file.
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
#+end_src

* Orgmode

#+begin_src emacs-lisp :tangle yes
    (setq org-hide-emphasis-markers t)
    (setq org-log-done 'time)
    (setq doc-view-resolution 400)
    (put 'dired-find-alternate-file 'disabled nil)
    (require 'org-tempo)

    (setq org-directory "~/sync/org")
    (setq org-agenda-files (directory-files org-directory t "\\.org$"))
    (setq org-agenda-skip-unavailable-files t)
    (setq org-refile-targets
          '((nil :maxlevel . 3)
        (org-agenda-files :maxlevel . 3)))

  ;;  (setq org-refile-targets '((nil :maxlevel . 2)))

    (setq org-capture-templates '(
      ("t" "Todo [inbox]" entry (file+headline "~/sync/orgmode/gtd/inbox.org" "Inbox") "\n* TODO %i%?\n")
      ("c" "Todo [main]" entry (file+headline "~/sync/orgmode/gtd/main.org" "Inbox") "\n* TODO %i%?\n")
      ("r" "Reschedule task with reason"
         entry (file+headline "~/sync/org/main.org" "Task Reschedules")
         "* TODO %^{Task description}\nSCHEDULED: %^t\n:LOGBOOK:\n- Rescheduled from %^{Original date} due to %^{Reason}\n:END:\n")
     ))

    (global-set-key (kbd "C-c l") #'org-store-link)
    (global-set-key (kbd "C-c a") #'org-agenda)
    (global-set-key (kbd "C-c c") #'org-capture)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "IN-PROGRESS(i)" "SUSPENDED(s)" "IN-REVIEW(r)" "|" "WAITING(w)" "DONE(d)" "CANCELED(c)")))
    (setq org-enforce-todo-dependencies t)

    (setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t%-6e% s")
                                     (todo . " %i %-12:c %-6e")
                                     (tags . " %i %-12:c")
                                     (search . " %i %-12:c")))
    (setq org-agenda-skip-scheduled-if-deadline-is-shown t)

    (setq org-clock-persist 'history)
    (org-clock-persistence-insinuate)

    (setq org-timer-default-timer 25)

    (defun my-org-mode-hook ()
      (org-indent-mode t))
    (add-hook 'org-mode-hook 'my-org-mode-hook)

    (setq org-format-latex-options (plist-put org-format-latex-options :scale 4))

    (setq org-confirm-babel-evaluate nil)
#+end_src

** Task status for Status bars

#+begin_src emacs-lisp :tangle yes
  (defun my-org-timer-remaining-time ()
    "Return the remaining time of the current org-timer as a formatted string."
    (if (and org-timer-countdown-timer
             (timerp org-timer-countdown-timer))
        (let ((time-left (- (time-to-seconds (timer--time org-timer-countdown-timer))
                            (time-to-seconds (current-time)))))
          (if (> time-left 0)
              (format-seconds "%h:%02m" time-left)
            "Time's up!"))
      "No timer set"))

#+end_src

* Themes

#+begin_src emacs-lisp :tangle yes
  (load-theme 'doom-gruvbox t)
  (set-face-attribute 'default nil :font "Iosevka-6")
  ;; If font is loaded before frame creation it is reset
  (add-to-list 'after-make-frame-functions
               (lambda (frame)
                 (select-frame frame)
                 (set-face-attribute 'default nil :font "Iosevka-6")))
#+end_src

Modus operandi customization
#+begin_src emacs-lisp :tangle no
(load-theme 'modus-operandi t)

;; Override colors after the theme is loaded
(with-eval-after-load 'modus-themes
  (modus-themes-with-colors
    (custom-set-faces
     ;; Basic text and background
     `(default ((t (:background "#1c1c1c" :foreground "#e4e4ef")))) ; Dark gray background, light gray text
     `(cursor ((t (:background "#f6f3e8"))))                          ; Light cursor

     ;; Syntax elements
     `(font-lock-comment-face ((t (:foreground "#888888" :slant italic))))
     `(font-lock-string-face ((t (:foreground "#86a2be"))))
     `(font-lock-keyword-face ((t (:foreground "#ffdd33" :weight bold))))
     `(font-lock-function-name-face ((t (:foreground "#96a6c8"))))
     `(font-lock-variable-name-face ((t (:foreground "#ffb964"))))
     `(font-lock-type-face ((t (:foreground "#99cc99"))))
     `(font-lock-constant-face ((t (:foreground "#dca3a3"))))
     `(font-lock-builtin-face ((t (:foreground "#dca3a3"))))
     `(font-lock-warning-face ((t (:foreground "#cc9393" :weight bold))))

     ;; UI elements
     `(region ((t (:background "#333333"))))
     `(mode-line ((t (:background "#444444" :foreground "#dddddd"))))
     `(mode-line-inactive ((t (:background "#2a2a2a" :foreground "#888888"))))
     `(fringe ((t (:background "#1c1c1c"))))
     `(minibuffer-prompt ((t (:foreground "#96a6c8" :weight bold))))
     )))
#+end_src


Show whitespaces in program mode
#+begin_src emacs-lisp :tangle yes
  (require 'whitespace)
  (setq whitespace-style '(face empty newline trailing space-mark indentation::space))
  ;; (add-hook 'prog-mode-hook 'whitespace-mode)
#+end_src

* Ledger

Specify useful commands for ledger
#+begin_src emacs-lisp :tangle yes
  (setq ledger-reports
      '(("cashflow" "ledger -f %(ledger-file) --cost -X EUR bal ^Income ^Expenses")
        ("cashflow-rsd" "ledger -f %(ledger-file) --cost -X RSD bal ^Income ^Expenses")
        ("net-worth" "ledger -f %(ledger-file) --cost -X EUR bal ^Assets ^Liabilities")
        ("net-worth-rsd" "ledger -f %(ledger-file) --cost -X RSD bal ^Assets ^Liabilities")
        ("prices" "ledger prices -f %(ledger-file)")
        ("bal" "%(binary) -f %(ledger-file) --cost -X EUR bal")
        ("bal-rsd" "%(binary) -f %(ledger-file) --cost -X RSD bal")
        ("reg" "%(binary) -f %(ledger-file) --cost -X EUR reg")
        ("reg-rsd" "%(binary) -f %(ledger-file) --cost -X RSD reg")
        ("payee" "%(binary) -f %(ledger-file) --cost -X EUR reg @%(payee)")
        ("payee-rsd" "%(binary) -f %(ledger-file) --cost -X RSD reg @%(payee)")
        ("account" "%(binary) -f %(ledger-file) --cost -X EUR reg %(account)")
        ("account-rsd" "%(binary) -f %(ledger-file) --cost -X RSD reg %(account)")))
#+end_src

* Org-Roam

#+begin_src emacs-lisp :tangle yes
  ;; Initialize variables
  (setq org-roam-v2-ack t)
  (setq org-roam-directory "~/sync/orgmode/library")
  (setq org-roam-dailies-directory "journal/")
  (setq org-roam-completion-everywhere t)

  ;; Key bindings
  (global-set-key (kbd "C-c n l") 'org-roam-buffer-toggle)
  (global-set-key (kbd "C-c n f") 'org-roam-node-find)
  (global-set-key (kbd "C-c n i") 'org-roam-node-insert)
  (define-key org-mode-map (kbd "C-M-i") 'completion-at-point)

  ;; Load and configure org-roam-dailies
  (require 'org-roam-dailies) ;; Ensure the keymap is available

  ;; Define dailies map if not already defined
  (unless (boundp 'org-roam-dailies-map)
    (define-prefix-command 'org-roam-dailies-map))

  (define-key org-roam-dailies-map (kbd "Y") 'org-roam-dailies-capture-yesterday)
  (define-key org-roam-dailies-map (kbd "T") 'org-roam-dailies-capture-tomorrow)

  ;; Bind the dailies map to a key
  (global-set-key (kbd "C-c n d") org-roam-dailies-map)

  ;; Activate org-roam database autosync
  (org-roam-db-autosync-mode)
#+end_src


** Org-Roam UI

#+begin_src emacs-lisp :tangle yes
  (setq org-roam-ui-sync-theme t)
  (setq org-roam-ui-follow t)
  (setq org-roam-ui-update-on-save t)
  (setq org-roam-ui-open-on-start t)
#+end_src

* Languages

** Compilation mode

Skip warnings in compilation mode.
#+begin_src emacs-lisp :tangle no
  (setq compilation-skip-threshold 2)
#+end_src

** Flycheck

#+begin_src emacs-lisp :tangle no
  (global-flycheck-mode +1)
#+end_src

** Eglot

#+begin_src emacs-lisp :tangle no
  (add-hook 'eglot--managed-mode-hook (lambda () (flymake-mode -1)))
  (setq eglot-ignored-server-capabilities '(:inlayHintProvider))
#+end_src

** Company-mode

#+begin_src emacs-lisp :tangle no
  (add-hook 'after-init-hook 'global-company-mode)
#+end_src

** Rust

Requires =eglot= and =rust-mode= packages.

#+begin_src emacs-lisp :tangle yes
  ; (require 'eglot)
  ; (add-hook 'rust-mode-hook 'eglot-ensure)

  (require 'rust-mode)
  (setq rust-mode-treesitter-derive t)
  (setq rust-format-on-save t)
#+end_src

** C++ IDE

#+begin_src emacs-lisp :tangle yes
     ;; C/C++ indentation settings matching clangd/eglot-format
     (setq-default c-default-style '((c++-mode . "stroustrup")
                                     (c-mode . "stroustrup")))
     (setq-default c-basic-offset 2)
     (setq-default indent-tabs-mode nil)
#+end_src

#+begin_src emacs-lisp :tangle no
     ;; LSP client using clangd
     (add-hook 'c++-mode-hook #'eglot-ensure)
     (add-hook 'c-mode-hook #'eglot-ensure)

     (setq eglot-autoshutdown t)
     (setq eglot-extend-to-xref t)

     (with-eval-after-load 'eglot
       (add-to-list 'eglot-server-programs
                    '((c++-mode c-mode) . ("clangd"
                                           "--background-index" "--pch-storage=memory"
                                           "--clang-tidy"))))

     ;; Completion UI (popup)
     (global-corfu-mode)
     (setq corfu-cycle t
           corfu-auto t
           corfu-auto-delay 0.0
           corfu-quit-no-match 'separator
           corfu-preselect-first t)

     ;; Extra completion sources
     (add-to-list 'completion-at-point-functions #'cape-dabbrev)
     (add-to-list 'completion-at-point-functions #'cape-file)

     ;; Diagnostics
     (add-hook 'prog-mode-hook #'flymake-mode)

     ;; Project management
     (setq project-vc-merge-submodules nil)

     ;; Vertico and Consult for navigation
     (vertico-mode)
     (global-set-key (kbd "C-s") #'consult-line)
     (global-set-key (kbd "C-c p s") #'consult-ripgrep)

     ;; Enable electric-indent to match LSP autoformat behavior
     (electric-indent-mode 1)

     ;; Optional: Format buffer before save using eglot
     (add-hook 'before-save-hook
               (lambda ()
                 (when (derived-mode-p 'c-mode 'c++-mode)
                   (eglot-format-buffer))))
#+end_src

Debugger
#+begin_src emacs-lisp :tangle yes
  (setq gdb-many-windows t)          ;; enable a rich UI layout
  (setq gdb-show-main t)             ;; show main at startup
  (setq gdb-use-separate-io-buffer t) ;; separate buffer for program I/O
#+end_src

#+RESULTS:
: t

** Nix

#+begin_src emacs-lisp :tangle yes
  (add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))
#+end_src
